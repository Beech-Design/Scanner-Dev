# Beech Design Scanner Simulation
# Adrian Bowyer
# 19 February 2020

import Part, BOPTools, FreeCAD, math, copy
from FreeCAD import Base

#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# Useful general functions and numbers

# Length in mm considered to be 0

tooShort = 0.001

# There must be an easier way to make the null set...

def Null():
 n1 = Part.makeBox(1, 1, 1)
 n2 = Part.makeBox(1, 1, 1)
 n2.translate(Base.Vector(10, 10, 10))
 return(n1.common(n2))


# Make a cylinder between two points of a given radius

def Cylinder(p0, p1, r):
 p2 = p1.sub(p0)
 length = p2.Length
 if length < 0.001:
  return Null()
 c = Part.makeCylinder(r, length, p0, p2, 360)
 return c

# Make a plane cross section of a solid, s, and return it as a list of wires
# The plane passes through point p0 and has normal n

def CrossSection(s, p0, n):
 nn = copy.deepcopy(n)
 nn.normalize()
 d = nn.dot(p0)
 wires=list()
 for i in s.slice(nn, d):
  wires.append(i)
 comp=Part.Compound(wires)
 return comp


#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# The main simulator class - this represents a part of the scanner.  The parts are arranged in a tree.

class ScannerPart:
 def __init__(self, offset = Base.Vector(0, 0, 0), u = Base.Vector(1, 0, 0), v = Base.Vector(0, 1, 0), w = Base.Vector(0, 0, 1), parent = None,\
  lightAngle = -1, uPixels = 0, vPixels = 0, uMM = 0, vMM = 0, focalLength = -1):

  # Offset from the parent in the parent's coordinate system
  # If the parent is None these are absolute cartesian coordinates

  self.offset = offset

  # Local Cartesian coordinates
 
  self.u = u.normalize()
  self.v = v.normalize()
  self.w = w.normalize()

  # If we are a light source (i.e. lightAngle >= 0)

  self.lightAngle = lightAngle

  # If we are a camera (i.e. focalLength >= 0)

  self.uPixels = uPixels
  self.vPixels = vPixels
  self.uMM = uMM
  self.vMM = vMM
  self.focalLength = focalLength

  # Parent and children in the tree

  self.parent = parent
  self.children = []
  if parent is not None:
   parent.children.append(self)

#-----------------

# Compute my absolute offset from the origin recursively

 def AbsoluteOffset(self):
  if self.parent is None:
   return self.offset
  parentUO = copy.deepcopy(self.parent.u)
  parentVO = copy.deepcopy(self.parent.v)
  parentWO = copy.deepcopy(self.parent.w)
  parentUO = parentUO.multiply(self.offset.x)
  parentVO = parentVO.multiply(self.offset.y)
  parentWO = parentWO.multiply(self.offset.z)
  o = parentUO.add(parentVO.add(parentWO))
  return o.add(self.parent.AbsoluteOffset())

# Rotate my coordinates, and the coordinates of all my descendents recursively

 def Rotate(self, r):
  self.u = r.multVec(self.u).normalize()
  self.v = r.multVec(self.v).normalize()
  self.w = r.multVec(self.w).normalize()
  for child in self.children:
   child.Rotate(r)

 # Rotate about the u axis. angle is in radians

 def RotateU(self, angle):
  r = Base.Rotation(self.u, angle*180/math.pi)
  self.Rotate(r)

 # Rotate about the v axis. angle is in radians

 def RotateV(self, angle):
  r = Base.Rotation(self.v, angle*180/math.pi)
  self.Rotate(r)

 # Rotate about the w axis. angle is in radians

 def RotateW(self, angle):
  r = Base.Rotation(self.w, angle*180/math.pi)
  self.Rotate(r)

 # Turn on the light and make a cross section of a shape, s.
 # The result is a Part consisting of zero (miss) or more wires.

 def LightSlice(self, s):
  p0 = self.AbsoluteOffset()
  return CrossSection(s, p0, self.u)

 # Make a picture of the tree recursively

 def Model(self):
  p1 = self.AbsoluteOffset()
  uc = Part.makeCylinder(0.2, 10, p1, self.u, 360)
  vc = Part.makeCylinder(0.2, 10, p1, self.v, 360)
  wc = Part.makeCylinder(0.2, 10, p1, self.w, 360)
  m = uc.fuse(vc)
  m = m.fuse(wc)
  if self.parent is not None:
   p0 = self.parent.AbsoluteOffset()
  else:
   p0 = Base.Vector(0, 0, 0)
  twig = Cylinder(p0, p1, 0.1)
  m = m.fuse(twig)
  for child in self.children:
   m = m.fuse(child.Model())
  return m

#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

b = Part.makeBox(10, 20, 30)
Part.show(b)
world = ScannerPart()
twig1 = ScannerPart(offset = Base.Vector(18, 20, 15), parent = world)
twig1.RotateV(1)
c = twig1.LightSlice(b)
es = c.Edges
for edge in es:
 v = edge.Vertexes
 for p in v:
  print(p.Point)
Part.show(c)
Part.show(world.Model())

#world = ScannerPart()
#twig1 = ScannerPart(offset = Base.Vector(8, 20, 25), parent = world)
#twig2 = ScannerPart(offset = Base.Vector(10, -5, 6), parent = world)
#twig3 = ScannerPart(offset = Base.Vector(-10, 10, 30), parent = twig1)
#twig1.RotateU(1)
#a = world.Model()
#Part.show(a)


